using System.Windows.Forms;

namespace Steam_Accunt_Restorrer_Note
{
    public partial class mainForm : Form
    {
        //private bool[] checkboxStates;
        //private Form2 form2;

        public mainForm()
        {
            InitializeComponent();
            mainText.Text = "Прошу прощения, но у вас слишком мало предоставленной информации для восстановления вашего аккаунта - мы ничем не сможем вам помочь. Нам очень жаль 😔.\n";
            //mainText.Text = "ОПРЕДЕЛИТЕ КАКУЮ ИНФОРМАЦИЮ ВАМ ПЕРЕДАЛ КЛИЕНТ, ВЫБРАВ НЕОБХОДИМЫЕ ФЛАЖКИ ✅. ";
            //this.WindowState = FormWindowState.Maximized;

            //form2 = new Form2(this);
            cb1.Checked = DataStorage.Cb_email;
            cb4.Checked = DataStorage.Cb_gameKey;
            cb6.Checked = DataStorage.Cb_phone;
        }

        //public void SaveState()
        //{
        //    checkboxStates = new bool[]
        //    {
        //        cb1.Checked,
        //        cb21.Checked,
        //        cb22.Checked,
        //        cb23.Checked,
        //        cb3.Checked,
        //        cb4.Checked,
        //        cb5.Checked,
        //        cb6.Checked
        //        // Добавьте больше чекбоксов, если необходимо
        //    };
        //}

        //// Метод для восстановления состояния всех чекбоксов
        //public void RestoreState()
        //{
        //    if (checkboxStates != null)
        //    {
        //        cb1.Checked = checkboxStates[0];
        //        cb21.Checked = checkboxStates[1];
        //        cb22.Checked = checkboxStates[2];
        //        cb23.Checked = checkboxStates[3];
        //        cb3.Checked = checkboxStates[4];
        //        cb4.Checked = checkboxStates[5];
        //        cb5.Checked = checkboxStates[6];
        //        cb6.Checked = checkboxStates[7];
        //        // Восстановите больше чекбоксов, если необходимо
        //    }
        //}

        //// Метод для обновления состояния чекбокса 1
        //public void UpdateCheckbox(bool state)
        //{
        //    cb1.Checked = state;
        //}

        public void openForm2()
        {
            Form2 openForm = new Form2();
            openForm.StartPosition = FormStartPosition.Manual;
            openForm.Location = Location;
            openForm.Size = Size;
            openForm.Show();
            this.Hide();
        }

        private void appPanel_Paint(object sender, PaintEventArgs e)
        {

        }

        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);
        [System.Runtime.InteropServices.DllImport("user32.dll")]
        public static extern bool ReleaseCapture();
        private void appPanel_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        private void CloseBtn_Click(object sender, EventArgs e)
        {
            //this.Close();
            Application.Exit();
        }

        private void MaximazeBtn_Click(object sender, EventArgs e)
        {
            WindowState = WindowState == FormWindowState.Maximized ? FormWindowState.Normal : FormWindowState.Maximized;
        }

        private void MinimazeBtn_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;
        }

        private void mainForm_Load(object sender, EventArgs e)
        {

        }

        string theInfo = "";
        string searchTxt;
        //int startCheckBoxText;
        int startIndex;

        // Функция для нормализации текста (удаление лишних пробелов и приведение новых строк к одному формату)
        string NormalizeText(string text)
        {
            return text.Replace("\r\n", "\n").Replace("\r", "\n").Trim();
        }
        //public void RemoveMatchingTextFromRichTextBox(RichTextBox mainText, string checkBoxText)
        //{
        //    // Нормализация текста
        //    string normalizedCheckBoxText = NormalizeText(checkBoxText);
        //    string normalizedMainText = NormalizeText(mainText.Text);

        //    // Поиск совпадений в нормализованных строках
        //    int startIndex = normalizedMainText.IndexOf(normalizedCheckBoxText);
        //    if (startIndex != -1)
        //    {
        //        // Вычисляем исходный индекс для удаления
        //        int originalStartIndex = mainText.Text.Replace("\r\n", "\n").Replace("\r", "\n").IndexOf(normalizedCheckBoxText);
        //        if (originalStartIndex != -1)
        //        {
        //            // Удаление текста с сохранением форматирования
        //            mainText.Select(originalStartIndex, checkBoxText.Length-1);
        //            mainText.SelectedText = string.Empty;
        //        }
        //    }
        //}

        public void RemoveMatchingTextFromRichTextBox(RichTextBox mainText, string checkBoxText)
        {
            // Нормализация текста
            string normalizedCheckBoxText = NormalizeText(checkBoxText);
            string normalizedMainText = NormalizeText(mainText.Text);

            // Поиск совпадений в нормализованных строках
            int startIndex = normalizedMainText.IndexOf(normalizedCheckBoxText);
            if (startIndex != -1)
            {
                // Преобразование индекса для оригинального текста
                int originalStartIndex = mainText.Text.Replace("\r\n", "\n").Replace("\r", "\n").IndexOf(normalizedCheckBoxText);
                if (originalStartIndex != -1)
                {
                    int lengthToRemove = checkBoxText.Length;

                    // Проверка и удаление окружающих новых строк
                    int endIndex = originalStartIndex + lengthToRemove;
                    if (originalStartIndex > 0 && mainText.Text[originalStartIndex - 1] == '\n')
                    {
                        originalStartIndex--;
                        lengthToRemove++;
                    }
                    if (endIndex < mainText.Text.Length && mainText.Text[endIndex] == '\n')
                    {
                        lengthToRemove++;
                    }

                    // Удаление текста из RichTextBox
                    mainText.Select(originalStartIndex, lengthToRemove);
                    mainText.SelectedText = string.Empty;

                    // Восстановление оригинального форматирования
                    mainText.Text = mainText.Text.Replace("\n", "\r\n");
                }
            }
        }

        //public void ReplaceTextInRichTextBox(RichTextBox mainText, string oldText, string newText)
        //{
        //    // Нормализация символов новой строки для обеспечения корректного поиска
        //    string normalizedOldText = oldText.Replace("\r\n", "\n").Replace("\r", "\n");
        //    string normalizedMainText = mainText.Text.Replace("\r\n", "\n").Replace("\r", "\n");

        //    // Поиск индекса старого текста
        //    int startIndex = normalizedMainText.IndexOf(normalizedOldText);
        //    if (startIndex != -1)
        //    {
        //        // Использование Select для выделения текста в RichTextBox
        //        mainText.Select(startIndex, oldText.Length);

        //        // Замена выделенного текста
        //        mainText.SelectedText = newText;
        //    }
        //    else
        //    {
        //        // Опционально: уведомление о том, что текст не найден
        //        MessageBox.Show("Текст для замены не найден.", "Информация", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //    }
        //}

        public void ReplaceTextInRichTextBox(RichTextBox mainText, string oldText, string newText)
        {
            // Удаляем избыточные символы новой строки для корректного поиска
            string normalizedOldText = oldText.Trim('\r', '\n');
            string normalizedMainText = mainText.Text.Replace("\r\n", "\n").Replace("\r", "\n");

            // Поиск индекса старого текста
            int startIndex = normalizedMainText.IndexOf(normalizedOldText, StringComparison.Ordinal);
            if (startIndex != -1)
            {
                // Преобразование индекса для оригинального текста
                startIndex = mainText.Text.IndexOf(normalizedOldText, StringComparison.Ordinal);

                if (startIndex != -1)
                {
                    // Удаление текста с возможными лишними символами новой строки вокруг него
                    int endIndex = startIndex + normalizedOldText.Length;
                    int lengthToRemove = normalizedOldText.Length;

                    // Проверка на лишние символы новой строки перед и после текста
                    if (startIndex > 0 && (mainText.Text[startIndex - 1] == '\n' || mainText.Text[startIndex - 1] == '\r'))
                    {
                        startIndex--;
                        lengthToRemove++;
                    }
                    if (endIndex < mainText.Text.Length && (mainText.Text[endIndex] == '\n' || mainText.Text[endIndex] == '\r'))
                    {
                        lengthToRemove++;
                    }

                    // Удаление выделенного текста с лишними символами новой строки
                    mainText.Select(startIndex, lengthToRemove);
                    mainText.SelectedText = string.Empty;

                    // Вставка нового текста
                    mainText.Select(startIndex, 0);
                    mainText.SelectedText = newText;
                }
            }
            else
            {
                // Опционально: уведомление о том, что текст не найден
                MessageBox.Show("Текст для замены не найден.", "Информация", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }







        public string ResortingString(string input)
        {
            // Преобразование строки в массив символов
            char[] charArray = input.ToCharArray();

            // Сортировка массива символов
            Array.Sort(charArray);

            // Возврат новой отсортированной строки
            return new string(charArray);
        }

        public void PastaGenerator(string PastaParam)
        {
            if (mainText == null)
            {
                throw new ArgumentNullException("mainText", "RichTextBox mainText не должен быть null.");
            }

            // Приводим строку к нижнему регистру для более гибкого сравнения
            switch (PastaParam.ToLower())
            {
                case string s when s.Equals("1"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ не пополнял баланс на аккаунте.\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("2"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты. [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r";
                        break;
                    }
                case string s when s.Equals("3"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("4"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("12"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты. [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("123"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты. [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("1234"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты. [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("14"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("13"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("134"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("124"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты. [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("234"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты. [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("34"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("24"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты. [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                case string s when s.Equals("23"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты. [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне не дарили игры на аккаунт и я не дарил.\n";
                        break;
                    }
                //case string s when s.Equals("135"):
                //    mainText.Text = "Вы выбрали первые 1,3,5 чекбокс.";
                //    break;
                case string s when s.Equals("123456"):
                    {
                        mainText.Text = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                            "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                            "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nНомер телефона при создании аккаунта: [ Вводите первый привязанный номер телефона к аккаунту ]\r" +
                            "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через карту\r\n\r" +
                            "\nТип карты: MasterCard [ Вводите тип карты. MasterCard - ЭТО ПРИМЕР! ]\r" +
                            "\nПоследние 4 цифры номера карты: [ Вводите последние 4 цифры карты ]\r" +
                            "\nФИО владельца карты: [ Вводите Фамилию и Имя владельца карты ]\r" +
                            "\nРасчетный адрес: [ место жительства ]\r" +
                            "\nИндекс почты: [ Вводите цифры почты по месту жительства ]\r" +
                            "\nПрикрепил квитанции с карты: [ Квитанции/чеки прикрепляете вложением, желательно от 2-х до 3-х ]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте через специализированные сайты.() [ В () укажите название сайта. ]\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nЯ пополнял баланс на аккаунте давно, через терминал:\r\n\r" +
                            "\nКвитанции с данных пополнений прикрепил. [ Приложите квитанции вложением. ]\r" +
                            "\nАдрес терминала: [ Страна, Город, Улица ]\r" +
                            "\nДата: Апрель 2023 [ Указываете примерную дату пополнения. Если помните несколько - укажите. Апрель 2023 - ЭТО ПРИМЕР!]\r\n\r" +
                            "\nМне дарили игры на аккаунт [или я дарил игры на аккаунт]\r\n\r" +
                            "\nИгра: [ Введите название игры ]\r\nНик друга: [ Введите ник друга ]\r" +
                            "\nПримерная дата: январь 2023 года [ указываете приблизительно, а не точную дату, если даже ее не знаете. январь 2023 года - ЭТО ПРИМЕР! ]";
                        break;
                    }
                default:
                    mainText.Text = "Прошу прощения, но у вас слишком мало предоставленной информации для восстановления вашего аккаунта - мы ничем не сможем вам помочь. Нам очень жаль 😔.\n";
                    break;
            }
        }

        private void cb1_CheckedChanged(object sender, EventArgs e)
        {
            //Thread.Sleep(1000);
            //await Task.Delay(1000);
            if (cb1.Checked)
            {
                theInfo += "1";
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                PastaGenerator(theInfo);
            }
            else
            {
                searchTxt = "1";
                startIndex = theInfo.IndexOf(searchTxt);

                if (startIndex != -1)
                {
                    theInfo = theInfo.Remove(startIndex, searchTxt.Length);
                }
                theInfo = ResortingString(theInfo);
                PastaGenerator(theInfo);
                //string checkBoxText = "Далее, вставляете это обращение в последнее поле формы:\r\n\r" +
                //    "\nЗдравствуйте, уважаемая поддержка Steam. Я потерял доступ к аккаунту! В этом обращении я докажу, что я владелец аккаунта.\r" +
                //    "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                //    "\nМое место жительства: [ Страна , Город, Улица, Квартира, Дом ]\r\n\r" +
                //    "\nЯ не пополнял баланс на аккаунте.\r" +
                //    "\nМне не дарили игры на аккаунт и я не дарил.";

                // Выполнение удаления текста
                //RemoveMatchingTextFromRichTextBox(mainText, checkBoxText);
            }
            DataStorage.Cb_email = cb1.Checked;
        }

        private void cb21_CheckedChanged(object sender, EventArgs e)
        {
            if (cb21.Checked)
            {
                theInfo += "2";
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                PastaGenerator(theInfo);
            }
            else
            {
                searchTxt = "2";
                startIndex = theInfo.IndexOf(searchTxt);

                if (startIndex != -1)
                {
                    theInfo = theInfo.Remove(startIndex, searchTxt.Length);
                }
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                PastaGenerator(theInfo);
            }
        }

        private void cb22_CheckedChanged(object sender, EventArgs e)
        {
            if (cb22.Checked)
            {
                theInfo += "3";
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                PastaGenerator(theInfo);
            }
            else
            {
                searchTxt = "3";
                startIndex = theInfo.IndexOf(searchTxt);

                if (startIndex != -1)
                {
                    theInfo = theInfo.Remove(startIndex, searchTxt.Length);
                }
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                PastaGenerator(theInfo);
            }
        }

        private void cb23_CheckedChanged(object sender, EventArgs e)
        {
            if (cb23.Checked)
            {
                theInfo += "4";
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                PastaGenerator(theInfo);
            }
            else
            {
                searchTxt = "4";
                startIndex = theInfo.IndexOf(searchTxt);

                if (startIndex != -1)
                {
                    theInfo = theInfo.Remove(startIndex, searchTxt.Length);
                }
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                PastaGenerator(theInfo);
            }
        }

        private void cb3_CheckedChanged(object sender, EventArgs e)
        {
            string checkBoxText = "\nМне дарили игры на аккаунт [или я дарил игры на аккаунт]\r\n\r" +
                            "\nИгра: [ Введите название игры ]\r\nНик друга: [ Введите ник друга ]\r" +
                            "\nПримерная дата: январь 2023 года [ указываете приблизительно, а не точную дату, если даже ее не знаете. январь 2023 года - ЭТО ПРИМЕР! ]\r" +
                            "\n[ Если есть несколько подарков - укажите их по идентичному шаблону! ].\n";

            string replaceText = "\nМне не дарили игры на аккаунт и я не дарил.\r\n";

            if (cb3.Checked)
            {
                //theInfo += "5";
                //theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                //PastaGenerator(theInfo);
                //if(mainText.Text.Contains(replaceText))
                //{
                //    ReplaceTextInRichTextBox(mainText, replaceText, checkBoxText);
                //}
                // Нормализация текста в mainText и checkBoxText
                string normalizedMainText = NormalizeText(mainText.Text);
                string normalizedReplaceText = NormalizeText(replaceText);

                // Проверка на наличие текста после нормализации
                if (normalizedMainText.Contains(normalizedReplaceText))
                {
                    ReplaceTextInRichTextBox(mainText, normalizedReplaceText, checkBoxText);
                }
                //ReplaceTextInRichTextBox(mainText, replaceText, checkBoxText);
            }
            else
            {
                searchTxt = "5";
                startIndex = theInfo.IndexOf(searchTxt);

                if (startIndex != -1)
                {
                    theInfo = theInfo.Remove(startIndex, searchTxt.Length);
                }
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                //PastaGenerator(theInfo);

                // Нормализация текста в mainText и checkBoxText
                string normalizedMainText = NormalizeText(mainText.Text);
                string normalizedCheckBoxText = NormalizeText(checkBoxText);

                // Проверка на наличие текста после нормализации
                if (normalizedMainText.Contains(normalizedCheckBoxText))
                {
                    ReplaceTextInRichTextBox(mainText, normalizedCheckBoxText, replaceText);
                }

            }
        }

        private void cb4_CheckedChanged(object sender, EventArgs e)
        {
            string checkBoxText = "\nЯ получал ключи от игры.\r" +
                                "\nИгра: [ Введите название игры ]\r" +
                                "\nКлюч: [ Введите ключ от игры. Пример: XBBRF-MR09R-NX8V ]\n";
            if (cb4.Checked)
            {
                //theInfo += "6";
                //theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                //PastaGenerator(theInfo);

                if (theInfo.Contains("1") || theInfo.Contains("2") || theInfo.Contains("3") || theInfo.Contains("4"))
                {
                    mainText.Text += checkBoxText;
                }
            }
            else
            {
                //searchTxt = "6";
                //startIndex = theInfo.IndexOf(searchTxt);

                //if (startIndex != -1)
                //{
                //    theInfo = theInfo.Remove(startIndex, searchTxt.Length);
                //}
                //theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                // Нормализация текста в mainText и checkBoxText
                string normalizedMainText = NormalizeText(mainText.Text);
                string normalizedCheckBoxText = NormalizeText(checkBoxText);

                // Проверка на наличие текста после нормализации
                if (normalizedMainText.Contains(normalizedCheckBoxText))
                {
                    RemoveMatchingTextFromRichTextBox(mainText, checkBoxText);
                }
            }
            DataStorage.Cb_gameKey = cb4.Checked;
        }

        private void cb5_CheckedChanged(object sender, EventArgs e)
        {
            if (cb5.Checked)
            {
                //theInfo += "7";
                //theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                //PastaGenerator(theInfo);
            }
            else
            {
                //searchTxt = "7";
                //startIndex = theInfo.IndexOf(searchTxt);

                //if (startIndex != -1)
                //{
                //    theInfo = theInfo.Remove(startIndex, searchTxt.Length);
                //}
                //theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                //PastaGenerator(theInfo);
            }
        }

        private async void cb6_CheckedChanged(object sender, EventArgs e)
        {
            await Task.Delay(10);
            string checkBoxText = "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r" +
                            "\nНомер телефона при создании аккаунта: [ Вводите первый привязанный номер телефона к аккаунту ]\r\n";
            string checkBoxText2 = "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r" +
                "\nНомер телефона при создании аккаунта: [ Вводите первый привязанный номер телефона к аккаунту ]\r\n";

            string replaceText1 = "\nМоя почта, которая была при создании аккаунта: [ Вводите почту, на которую был зарегистрирован аккаунт ]\r\n";
            string replaceText2 = "\nМоя почта, которая была при создании аккаунта на данный момент - заблокирована и удалена. У меня нет возможности и данных для её восстановления.\r\n";

            if (cb6.Checked)
            {
                //theInfo += "8";
                //theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                //PastaGenerator(theInfo);

                if (theInfo.Contains("1"))
                {
                    ReplaceTextInRichTextBox(mainText, replaceText1, checkBoxText);
                }
                else if (theInfo.Contains("2") || theInfo.Contains("3") || theInfo.Contains("4"))
                {
                    ReplaceTextInRichTextBox(mainText, replaceText2, checkBoxText2);
                }
            }
            else
            {
                searchTxt = "8";
                startIndex = theInfo.IndexOf(searchTxt);

                if (startIndex != -1)
                {
                    theInfo = theInfo.Remove(startIndex, searchTxt.Length);
                }
                theInfo = ResortingString(theInfo);
                //MessageBox.Show("theInfo: " + theInfo);
                //PastaGenerator(theInfo);

                string normalizedMainText = NormalizeText(mainText.Text);
                string normalizedCheckBoxText = NormalizeText(checkBoxText);
                string normalizedCheckBoxText2 = NormalizeText(checkBoxText2);

                // Проверка на наличие текста после нормализации
                if (normalizedMainText.Contains(normalizedCheckBoxText) && theInfo.Contains("1"))
                {
                    ReplaceTextInRichTextBox(mainText, normalizedCheckBoxText, replaceText1);
                }
                else if (normalizedMainText.Contains(normalizedCheckBoxText2) && (theInfo.Contains("2") || theInfo.Contains("3") || theInfo.Contains("4")))
                {
                    ReplaceTextInRichTextBox(mainText, normalizedCheckBoxText2, replaceText2);
                }
            }
            DataStorage.Cb_phone = cb6.Checked;
        }

        private void mainText_TextChanged(object sender, EventArgs e)
        {

        }

        private void resultBtn_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(mainText.Text);
        }

        private void instructionsBtn_Click(object sender, EventArgs e)
        {
            openForm2();
        }
    }
}